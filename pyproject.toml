[project]
name = "explain"
version = "0.1.0"
description = "Explain Compiler Explorer output using AI"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "anthropic>=0.51.0",
    "aws-embedded-metrics>=3.3.0",
    "boto3>=1.35.0",
    "fastapi",
    "flask>=3.0.0",
    "humanfriendly>=10.0",
    "jinja2>=3.1.0",
    "mangum",
    "pydantic-settings>=2.9.1",
    "python-dotenv>=1.1.0",
    "requests>=2.31.0",
    "ruamel.yaml>=0.18.0",
]

[dependency-groups]
dev = [
    # In development mode, include the FastAPI development server.
    "fastapi[standard]>=0.115",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.11.10",
]

[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.lint]
select = [
    # Pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-comprehensions
    "C4",
    # flake8-pie
    "PIE",
    # flake8-return
    "RET",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Allow non-lowercase variable names (e.g., for API field names)
    "N806",
    # Allow missing docstrings for some cases
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    # Allow imperative mood in docstrings (e.g., "Create a new user")
    "D401",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"test*.py" = [
    "D", # Don't require docstrings in tests
    "ARG", # Allow unused arguments in tests (fixtures)
]
"app/explain_api.py" = [
    "N815", # Allow camelCase field names for API compatibility
]
"prompt_testing/*.py" = [
    "D", # Don't require docstrings in prompt testing modules for now
]

[tool.uv]
package = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.setuptools.packages.find]
include = ["app*", "prompt_testing*"]

[project.scripts]
prompt-test = "prompt_testing.cli:main"
