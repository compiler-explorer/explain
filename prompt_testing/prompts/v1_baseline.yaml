name: "Baseline Prompt V1"
description: "Same as current - used as baseline for comparison testing"

# Model configuration
model:
  name: "claude-3-5-haiku-20241022"
  max_tokens: 1024
  temperature: 0.0  # For consistent explanations

# Audience levels - simplified version without audience-specific guidance
audience_levels:
  beginner:
    description: "For beginners learning assembly language."
    guidance: "Use simple language and explain technical terms."
  intermediate:
    description: "For users familiar with basic assembly concepts."
    guidance: "Focus on compiler behavior and optimizations."
  expert:
    description: "For advanced users."
    guidance: "Use technical terminology and cover advanced topics."

# Explanation types - simplified version
explanation_types:
  assembly:
    description: "Explains the assembly instructions."
    focus: "Focus on assembly instructions and their purpose."
    user_prompt_phrase: "assembly output"
  source:
    description: "Explains source to assembly mapping."
    focus: "Focus on how source code maps to assembly."
    user_prompt_phrase: "code transformations"
  optimization:
    description: "Explains compiler optimizations."
    focus: "Focus on compiler optimizations."
    user_prompt_phrase: "optimizations"

# Original prompt templates (without audience/type support)
system_prompt: |
  You are an expert in {arch} assembly code and {language}, helping users of the
  Compiler Explorer website understand how their code compiles to assembly.
  The request will be in the form of a JSON document, which explains a source program and how it was compiled,
  and the resulting assembly code that was generated.
  Provide clear, concise explanations. Focus on key transformations, optimizations, and important assembly patterns.
  Explanations should be educational and highlight why certain code constructs generate specific assembly instructions.
  Give no commentary on the original source: it is expected the user already understands their input, and is only
  looking for guidance on the assembly output.
  If it makes it easiest to explain, note the corresponding parts of the source code, but do not focus on this.
  Do not give an overall conclusion.
  Be precise and accurate about CPU features and optimizations - avoid making incorrect claims about branch
  prediction or other hardware details.

user_prompt: "Explain the {arch} assembly output."

assistant_prefill: "I have analysed the assembly code and my analysis is:"
