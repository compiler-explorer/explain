description: Test cases demonstrating audience and explanation type variations
cases:
- id: factorial_beginner_assembly
  category: recursion
  quality: good_example
  description: Factorial function for beginner audience with assembly focus
  audience: beginner
  explanation_type: assembly
  input:
    language: C++
    compiler: x86-64 gcc 12.2
    compilationOptions:
    - -O2
    instructionSet: x86_64
    code: |
      int factorial(int n) {
          if (n <= 1) return 1;
          return n * factorial(n - 1);
      }
    asm:
    - text: 'factorial(int):'
    - text: '        mov     eax, 1'
      source:
        line: 2
    - text: '        cmp     edi, 1'
      source:
        line: 2
    - text: '        jle     .L1'
      source:
        line: 2
      labels:
      - name: .L1
        range:
          startCol: 17
          endCol: 20
    - text: '.L2:'
    - text: '        mov     edx, edi'
      source:
        line: 3
    - text: '        sub     edi, 1'
      source:
        line: 3
    - text: '        imul    eax, edx'
      source:
        line: 3
    - text: '        cmp     edi, 1'
      source:
        line: 2
    - text: '        jne     .L2'
      source:
        line: 2
      labels:
      - name: .L2
        range:
          startCol: 17
          endCol: 20
    - text: '.L1:'
    - text: '        ret'
      source:
        line: 4
    labelDefinitions:
      .L1: 3
      .L2: 9
  difficulty: beginner
- id: factorial_experienced_assembly
  category: recursion
  quality: good_example
  description: Same factorial function for experienced audience with assembly focus
  audience: experienced
  explanation_type: assembly
  input:
    language: C++
    compiler: x86-64 gcc 12.2
    compilationOptions:
    - -O2
    instructionSet: x86_64
    code: |
      int factorial(int n) {
          if (n <= 1) return 1;
          return n * factorial(n - 1);
      }
    asm:
    - text: 'factorial(int):'
    - text: '        mov     eax, 1'
      source:
        line: 2
    - text: '        cmp     edi, 1'
      source:
        line: 2
    - text: '        jle     .L1'
      source:
        line: 2
      labels:
      - name: .L1
        range:
          startCol: 17
          endCol: 20
    - text: '.L2:'
    - text: '        mov     edx, edi'
      source:
        line: 3
    - text: '        sub     edi, 1'
      source:
        line: 3
    - text: '        imul    eax, edx'
      source:
        line: 3
    - text: '        cmp     edi, 1'
      source:
        line: 2
    - text: '        jne     .L2'
      source:
        line: 2
      labels:
      - name: .L2
        range:
          startCol: 17
          endCol: 20
    - text: '.L1:'
    - text: '        ret'
      source:
        line: 4
    labelDefinitions:
      .L1: 3
      .L2: 9
  difficulty: experienced
- id: loop_experienced_assembly
  category: loop_optimization
  quality: good_example
  description: Loop optimization for experienced audience with assembly focus
  audience: experienced
  explanation_type: assembly
  input:
    language: C++
    compiler: x86-64 clang 15.0.0
    compilationOptions:
    - -O3
    - -march=native
    instructionSet: x86_64
    code: |
      void add_arrays(float* a, const float* b, const float* c, int n) {
          for (int i = 0; i < n; i++) {
              a[i] = b[i] + c[i];
          }
      }
    asm:
    - text: 'add_arrays(float*, float const*, float const*, int):'
    - text: '        test    ecx, ecx'
      source:
        line: 2
    - text: '        jle     .LBB0_16'
      source:
        line: 2
      labels:
      - name: .LBB0_16
        range:
          startCol: 17
          endCol: 25
    - text: '        mov     r8d, ecx'
      source:
        line: 2
    - text: '        cmp     ecx, 32'
      source:
        line: 2
    - text: '        jae     .LBB0_3'
      source:
        line: 2
      labels:
      - name: .LBB0_3
        range:
          startCol: 17
          endCol: 24
    - text: '        xor     ecx, ecx'
      source:
        line: 0
    - text: '.LBB0_12:'
    - text: '        mov     r9, rcx'
      source:
        line: 2
    - text: '        not     r9'
      source:
        line: 2
    - text: '        add     r9, r8'
      source:
        line: 2
    - text: '        mov     rax, r8'
      source:
        line: 2
    - text: '        and     rax, 7'
      source:
        line: 2
    - text: '        je      .LBB0_14'
      source:
        line: 2
      labels:
      - name: .LBB0_14
        range:
          startCol: 17
          endCol: 25
    - text: '.LBB0_13:'
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx], xmm0'
      source:
        line: 3
    - text: '        inc     rcx'
      source:
        line: 2
    - text: '        dec     rax'
      source:
        line: 2
    - text: '        jne     .LBB0_13'
      source:
        line: 2
      labels:
      - name: .LBB0_13
        range:
          startCol: 17
          endCol: 25
    - text: '.LBB0_14:'
    - text: '        cmp     r9, 7'
      source:
        line: 2
    - text: '        jb      .LBB0_16'
      source:
        line: 2
      labels:
      - name: .LBB0_16
        range:
          startCol: 17
          endCol: 25
    - text: '.LBB0_15:'
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 4]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 4]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 4], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 8]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 8]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 8], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 12]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 12]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 12], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 16]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 16]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 16], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 20]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 20]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 20], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 24]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 24]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 24], xmm0'
      source:
        line: 3
    - text: '        vmovss  xmm0, dword ptr [rsi + 4*rcx + 28]'
      source:
        line: 3
    - text: '        vaddss  xmm0, xmm0, dword ptr [rdx + 4*rcx + 28]'
      source:
        line: 3
    - text: '        vmovss  dword ptr [rdi + 4*rcx + 28], xmm0'
      source:
        line: 3
    - text: '        add     rcx, 8'
      source:
        line: 2
    - text: '        cmp     r8, rcx'
      source:
        line: 2
    - text: '        jne     .LBB0_15'
      source:
        line: 2
      labels:
      - name: .LBB0_15
        range:
          startCol: 17
          endCol: 25
    - text: '        jmp     .LBB0_16'
      source:
        line: 2
      labels:
      - name: .LBB0_16
        range:
          startCol: 17
          endCol: 25
    - text: '.LBB0_3:'
    - text: '        mov     rax, rdi'
      source:
        line: 2
    - text: '        sub     rax, rsi'
      source:
        line: 2
    - text: '        xor     ecx, ecx'
      source:
        line: 2
    - text: '        cmp     rax, 128'
      source:
        line: 2
    - text: '        jb      .LBB0_12'
      source:
        line: 2
      labels:
      - name: .LBB0_12
        range:
          startCol: 17
          endCol: 25
    - text: '        mov     rax, rdi'
      source:
        line: 2
    - text: '        sub     rax, rdx'
      source:
        line: 2
    - text: '        cmp     rax, 128'
      source:
        line: 2
    - text: '        jb      .LBB0_12'
      source:
        line: 2
      labels:
      - name: .LBB0_12
        range:
          startCol: 17
          endCol: 25
    - text: '        mov     ecx, r8d'
      source:
        line: 2
    - text: '        and     ecx, -32'
      source:
        line: 2
    - text: '        lea     rax, [rcx - 32]'
      source:
        line: 2
    - text: '        mov     r9, rax'
      source:
        line: 2
    - text: '        shr     r9, 5'
      source:
        line: 2
    - text: '        inc     r9'
      source:
        line: 2
    - text: '        test    rax, rax'
      source:
        line: 2
    - text: '        je      .LBB0_6'
      source:
        line: 2
      labels:
      - name: .LBB0_6
        range:
          startCol: 17
          endCol: 24
    - text: '        mov     r10, r9'
      source:
        line: 2
    - text: '        and     r10, -2'
      source:
        line: 2
    - text: '        xor     eax, eax'
      source:
        line: 2
    - text: '.LBB0_8:'
    - text: '        vmovups ymm0, ymmword ptr [rsi + 4*rax]'
      source:
        line: 3
    - text: '        vmovups ymm1, ymmword ptr [rsi + 4*rax + 32]'
      source:
        line: 3
    - text: '        vmovups ymm2, ymmword ptr [rsi + 4*rax + 64]'
      source:
        line: 3
    - text: '        vmovups ymm3, ymmword ptr [rsi + 4*rax + 96]'
      source:
        line: 3
    - text: '        vaddps  ymm0, ymm0, ymmword ptr [rdx + 4*rax]'
      source:
        line: 3
    - text: '        vaddps  ymm1, ymm1, ymmword ptr [rdx + 4*rax + 32]'
      source:
        line: 3
    - text: '        vaddps  ymm2, ymm2, ymmword ptr [rdx + 4*rax + 64]'
      source:
        line: 3
    - text: '        vaddps  ymm3, ymm3, ymmword ptr [rdx + 4*rax + 96]'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax], ymm0'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 32], ymm1'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 64], ymm2'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 96], ymm3'
      source:
        line: 3
    - text: '        vmovups ymm0, ymmword ptr [rsi + 4*rax + 128]'
      source:
        line: 3
    - text: '        vmovups ymm1, ymmword ptr [rsi + 4*rax + 160]'
      source:
        line: 3
    - text: '        vmovups ymm2, ymmword ptr [rsi + 4*rax + 192]'
      source:
        line: 3
    - text: '        vmovups ymm3, ymmword ptr [rsi + 4*rax + 224]'
      source:
        line: 3
    - text: '        vaddps  ymm0, ymm0, ymmword ptr [rdx + 4*rax + 128]'
      source:
        line: 3
    - text: '        vaddps  ymm1, ymm1, ymmword ptr [rdx + 4*rax + 160]'
      source:
        line: 3
    - text: '        vaddps  ymm2, ymm2, ymmword ptr [rdx + 4*rax + 192]'
      source:
        line: 3
    - text: '        vaddps  ymm3, ymm3, ymmword ptr [rdx + 4*rax + 224]'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 128], ymm0'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 160], ymm1'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 192], ymm2'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 224], ymm3'
      source:
        line: 3
    - text: '        add     rax, 64'
      source:
        line: 2
    - text: '        add     r10, -2'
      source:
        line: 2
    - text: '        jne     .LBB0_8'
      source:
        line: 2
      labels:
      - name: .LBB0_8
        range:
          startCol: 17
          endCol: 24
    - text: '        test    r9b, 1'
      source:
        line: 2
    - text: '        je      .LBB0_11'
      source:
        line: 2
      labels:
      - name: .LBB0_11
        range:
          startCol: 17
          endCol: 25
    - text: '.LBB0_10:'
    - text: '        vmovups ymm0, ymmword ptr [rsi + 4*rax]'
      source:
        line: 3
    - text: '        vmovups ymm1, ymmword ptr [rsi + 4*rax + 32]'
      source:
        line: 3
    - text: '        vmovups ymm2, ymmword ptr [rsi + 4*rax + 64]'
      source:
        line: 3
    - text: '        vmovups ymm3, ymmword ptr [rsi + 4*rax + 96]'
      source:
        line: 3
    - text: '        vaddps  ymm0, ymm0, ymmword ptr [rdx + 4*rax]'
      source:
        line: 3
    - text: '        vaddps  ymm1, ymm1, ymmword ptr [rdx + 4*rax + 32]'
      source:
        line: 3
    - text: '        vaddps  ymm2, ymm2, ymmword ptr [rdx + 4*rax + 64]'
      source:
        line: 3
    - text: '        vaddps  ymm3, ymm3, ymmword ptr [rdx + 4*rax + 96]'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax], ymm0'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 32], ymm1'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 64], ymm2'
      source:
        line: 3
    - text: '        vmovups ymmword ptr [rdi + 4*rax + 96], ymm3'
      source:
        line: 3
    - text: '.LBB0_11:'
    - text: '        cmp     rcx, r8'
      source:
        line: 2
    - text: '        jne     .LBB0_12'
      source:
        line: 2
      labels:
      - name: .LBB0_12
        range:
          startCol: 17
          endCol: 25
    - text: '.LBB0_16:'
    - text: '        vzeroupper'
      source:
        line: 5
    - text: '        ret'
      source:
        line: 5
    - text: '.LBB0_6:'
    - text: '        xor     eax, eax'
      source:
        line: 0
    - text: '        test    r9b, 1'
      source:
        line: 2
    - text: '        jne     .LBB0_10'
      source:
        line: 2
      labels:
      - name: .LBB0_10
        range:
          startCol: 17
          endCol: 25
    - text: '        jmp     .LBB0_11'
      source:
        line: 2
      labels:
      - name: .LBB0_11
        range:
          startCol: 17
          endCol: 25
    - text: ''
    labelDefinitions:
      .LBB0_16: 2
      .LBB0_3: 5
      .LBB0_14: 13
      .LBB0_13: 20
      .LBB0_15: 51
      .LBB0_12: 58
      .LBB0_6: 70
      .LBB0_8: 101
      .LBB0_11: 103
      .LBB0_10: 126
  difficulty: experienced
- id: struct_beginner_assembly
  category: data_structures
  quality: good_example
  description: Struct manipulation for beginners with assembly focus
  audience: beginner
  explanation_type: assembly
  input:
    language: C
    compiler: x86-64 gcc 11.2
    compilationOptions:
    - -O1
    instructionSet: x86_64
    code: |
      struct Point {
          int x;
          int y;
      };

      int manhattan_distance(struct Point p) {
          return p.x + p.y;
      }
    asm:
    - text: 'manhattan_distance:'
    - text: '        mov     rax, rdi'
      source:
        line: 7
    - text: '        shr     rax, 32'
      source:
        line: 7
    - text: '        lea     eax, [rax+rdi]'
      source:
        line: 7
    - text: '        ret'
      source:
        line: 8
    labelDefinitions: {}
  difficulty: beginner
